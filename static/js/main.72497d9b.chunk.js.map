{"version":3,"sources":["actions/index.js","constants/ActionTypes.js","components/TaskForm.js","components/TaskSearchControl.js","components/TaskSortControl.js","components/TaskControl.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/itemEditing.js","reducers/filterTable.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["editTask","task","type","TaskForm","props","onHandleChange","event","target","name","value","checked","setState","onSave","preventDefault","state","id","onUpdateTask","onAddTask","onCloseForm","onClear","status","this","itemEditing","nextProps","isDisplayForm","className","onClick","onSubmit","onChange","Component","connect","dispatch","actions","TaskSearchControl","e","onSearch","keyword","placeholder","TaskSortControl","sortBy","sortValue","onSort","by","sort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","href","role","TaskControl","TaskItem","onUpdateStatus","onDeleteTask","onEditTask","onOpenForm","index","showStatusElement","TaskList","filter","filterName","filterStatus","onFilterTable","tasks","filterTable","includes","toLowerCase","elmTask","orderBy","map","key","search","App","onToggleForm","onClearTask","Boolean","window","location","hostname","match","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","console","log","newTask","uuid","v4","setItem","stringify","findIndex","parseInt","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72497d9b.chunk.js","sourcesContent":["import * as types from './../constants/ActionTypes'\r\n\r\nexport const listALL = () => {\r\n    return {\r\n        type: types.LIST_ALL\r\n    }\r\n}\r\n\r\nexport const addTask = task => {\r\n    return {\r\n        type: types.ADD_TASK,\r\n        task // task : task\r\n    }\r\n}\r\n\r\nexport const toggleForm = () => {\r\n    return {\r\n        type: types.TOGGLE_FORM,\r\n    }\r\n}\r\n\r\nexport const openForm = () => {\r\n    return {\r\n        type: types.OPEN_FORM,\r\n    }\r\n}\r\n\r\nexport const closeForm = () => {\r\n    return {\r\n        type: types.CLOSE_FORM,\r\n    }\r\n}\r\n\r\nexport const updateStatus = (id) => {\r\n    return {\r\n        type: types.UPDATE_STATUS_TASK,\r\n        id, // id: id\r\n    }\r\n}\r\n\r\nexport const deleteTask = (id) => {\r\n    return {\r\n        type: types.DELETE_TASK,\r\n        id, // id: id\r\n    }\r\n}\r\n\r\nexport const updateTask = (task) => {\r\n    return {\r\n        type: types.UPDATE_TASK,\r\n        task, // task: task\r\n    }\r\n}\r\n\r\nexport const editTask = (task) => {\r\n    return {\r\n        type: types.EDIT_TASK,\r\n        task, // task: task\r\n    }\r\n}\r\n\r\nexport const filterTable = (filter) => {\r\n    return {\r\n        type: types.FILTER_TABLE,\r\n        filter, //filter : { filterName, filterStatus }\r\n    }\r\n}\r\n\r\nexport const searchTask = (keyword) => {\r\n    return {\r\n        type: types.SEARCH,\r\n        keyword, \r\n    }\r\n}\r\n\r\nexport const sortTask = (sort) => {\r\n    return {\r\n        type: types.SORT,\r\n        sort, \r\n    }\r\n}","export const LIST_ALL = 'LIST_ALL';\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS_TASK = 'UPDATE_STATUS_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const UPDATE_TASK = 'UPDATE_TASK';\r\nexport const FILTER_TABLE = 'FILTER_TABLE';\r\nexport const SEARCH = 'SEARCH';\r\nexport const SORT = 'SORT';","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"./../actions/index\";\r\n\r\nclass TaskForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: '',\r\n            name: '',\r\n            status: false\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        if (this.props.itemEditing && this.props.itemEditing.id !== null) {\r\n            this.setState({\r\n                id: this.props.itemEditing.id,\r\n                name: this.props.itemEditing.name,\r\n                status: this.props.itemEditing.status,\r\n            })\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        if (nextProps && nextProps.itemEditing) {\r\n            this.setState({\r\n                id: nextProps.itemEditing.id,\r\n                name: nextProps.itemEditing.name,\r\n                status: nextProps.itemEditing.status,\r\n            })\r\n        } else {\r\n            this.onClear();\r\n        }\r\n    }\r\n\r\n    onHandleChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.type === 'checkbox' ? target.checked : target.value;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    onSave = (event) => {\r\n        event.preventDefault();\r\n        if (this.state.id !== '') {\r\n            this.props.onUpdateTask(this.state);\r\n        }else{\r\n            this.props.onAddTask(this.state);\r\n        }\r\n        this.props.onCloseForm();\r\n        this.onClear();\r\n    }\r\n\r\n    onClear = () => {\r\n        this.setState({\r\n            name: '',\r\n            status: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isDisplayForm) return '';\r\n        return (\r\n            <div className=\"panel panel-warning\">\r\n                <div className=\"panel-heading\">\r\n                    <h3 className=\"panel-title\">{this.state.id !== '' ? 'Cập nhật công việc' : 'Thêm công việc'}\r\n                        <span\r\n                            className=\"fa fa-times-circle text-right\"\r\n                            onClick={this.props.onCloseForm}>\r\n                        </span>\r\n                    </h3>\r\n                </div>\r\n                <div className=\"panel-body\">\r\n                    <form onSubmit={this.onSave}>\r\n                        <div className=\"form-group\">\r\n                            <label>Tên :</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                className=\"form-control\"\r\n                                value={this.state.name}\r\n                                onChange={this.onHandleChange}\r\n                            />\r\n                        </div>\r\n                        <label>Trạng Thái :</label>\r\n                        <select\r\n                            className=\"form-control\"\r\n                            name=\"status\"\r\n                            value={this.state.status}\r\n                            onChange={this.onHandleChange}\r\n                        >\r\n                            <option value={true}>Kích Hoạt</option>\r\n                            <option value={false}>Ẩn</option>\r\n                        </select>\r\n                        <br />\r\n                        <div className=\"text-center\">\r\n                            <button type=\"submit\" className=\"btn btn-warning\">{this.state.id !== '' ? 'Cập nhật' : 'Thêm'}</button>&nbsp;\r\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.onClear}>Hủy Bỏ</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isDisplayForm: state.isDisplayForm,\r\n        itemEditing: state.itemEditing,\r\n    }\r\n};\r\n\r\nconst mapDispatchtoProps = (dispatch, props) => {\r\n    return {\r\n        onAddTask: (task) => {\r\n            dispatch(actions.addTask(task))\r\n        },\r\n        onUpdateTask: (task) => {\r\n            dispatch(actions.updateTask(task))\r\n        },\r\n        onCloseForm: () => {\r\n            dispatch(actions.closeForm())\r\n        },\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchtoProps)(TaskForm)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from './../actions/index'\r\n\r\nexport class TaskSearchControl extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            keyword: ''\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        var target = e.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n    onSearch = () => {\r\n        this.props.onSearch(this.state.keyword)\r\n    }\r\n\r\n\r\n    render() {\r\n        const { keyword } = this.state;\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"input-group\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"keyword\" value={keyword} onChange={this.onChange} placeholder=\"Nhập từ khóa...\" />\r\n                    <span className=\"input-group-btn\">\r\n                        <button\r\n                            className=\"btn btn-primary\"\r\n                            type=\"button\"\r\n                            onClick={this.onSearch}\r\n                        >\r\n                            <span className=\"fa fa-search mr-5\" />Tìm\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchtoProps = (dispatch, props) => {\r\n    return {\r\n        onSearch: (keyword) => {\r\n            dispatch(actions.searchTask(keyword));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchtoProps)(TaskSearchControl)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from './../actions/index'\r\n\r\nexport class TaskSortControl extends Component {\r\n\r\n    onClick = (sortBy, sortValue) => {\r\n        this.props.onSort({\r\n            by: sortBy,\r\n            value: sortValue\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { by, value } = this.props.sort\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"dropdown\">\r\n                    <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\"\r\n                        data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                        Sắp Xếp <span className=\"fa fa-caret-square-o-down ml-5\" />\r\n                    </button>\r\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                        <li onClick={() => this.onClick('name', 'asc')}>\r\n                            <a href=\"# \" role=\"button\" className={by === 'name' && value === 'asc' ? 'sort_selected' : ''}>\r\n                                <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                    Tên A-Z\r\n                                </span>\r\n                            </a>\r\n                        </li>\r\n                        <li onClick={() => this.onClick('name', 'desc')}>\r\n                            <a href=\"# \" role=\"button\" className={by === 'name' && value === 'desc' ? 'sort_selected' : ''}>\r\n                                <span className=\"fa fa-sort-alpha-desc pr-5\">\r\n                                    Tên Z-A\r\n                                </span>\r\n                            </a>\r\n                        </li>\r\n                        <li role=\"separator\" className=\"divider\" />\r\n                        <li onClick={() => this.onClick('status', 'desc')}>\r\n                            <a href=\"# \" role=\"button\" className={by === 'status' && value === 'desc' ? 'sort_selected' : ''}>\r\n                                Trạng Thái Kích Hoạt\r\n                            </a>\r\n                        </li>\r\n                        <li onClick={() => this.onClick('status', 'asc')}>\r\n                            <a href=\"# \" role=\"button\" className={by === 'status' && value === 'asc' ? 'sort_selected' : ''}>\r\n                                Trạng Thái Ẩn\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        sort: state.sort,\r\n    }\r\n};\r\n\r\nconst mapDispatchtoProps = (dispatch, props) => {\r\n    return {\r\n        onSort: (sort) => {\r\n            dispatch(actions.sortTask(sort));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchtoProps)(TaskSortControl)\r\n","import React, { Component } from 'react'\r\nimport TaskSearchControl from './TaskSearchControl'\r\nimport TaskSortControl from './TaskSortControl'\r\n\r\nexport class TaskControl extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row mt-15\">\r\n                {/*Search*/}\r\n                <TaskSearchControl />\r\n                {/*Sort*/}\r\n                <TaskSortControl />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskControl\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from './../actions/index'\r\n\r\nexport class TaskItem extends Component {\r\n\r\n    showStatusElement() {\r\n        return (\r\n            <span\r\n                className={this.props.task.status ? 'label label-danger' : 'label label-info'}\r\n                onClick={this.onUpdateStatus}\r\n            >\r\n                {this.props.task.status === true ? 'Kích Hoạt' : 'Ẩn'}\r\n            </span>\r\n        );\r\n    }\r\n\r\n    onUpdateStatus = () => {\r\n        this.props.onUpdateStatus(this.props.task.id)\r\n    }\r\n\r\n    onDeleteTask = () => {\r\n        this.props.onDeleteTask(this.props.task.id);\r\n        this.props.onCloseForm();\r\n    }\r\n\r\n    onEditTask = () => {\r\n        this.props.onOpenForm();\r\n        this.props.onEditTask(this.props.task);\r\n    }\r\n\r\n    render() {\r\n        var { task, index } = this.props;\r\n\r\n        return (\r\n            <tr>\r\n                <td>{index + 1}</td>\r\n                <td>{task.name}</td>\r\n                <td className=\"text-center\">\r\n                    {this.showStatusElement()}\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-warning\"\r\n                        onClick={this.onEditTask}>\r\n                        <span className=\"fa fa-pencil mr-5\" />Sửa\r\n                    </button>\r\n                    &nbsp;\r\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={this.onDeleteTask}>\r\n                        <span className=\"fa fa-trash mr-5\" />Xóa\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onUpdateStatus: (id) => {\r\n            dispatch(actions.updateStatus(id))\r\n        },\r\n        onDeleteTask: (id) => {\r\n            dispatch(actions.deleteTask(id))\r\n        },\r\n        onCloseForm: () => {\r\n            dispatch(actions.closeForm())\r\n        },\r\n        onOpenForm: () => {\r\n            dispatch(actions.openForm())\r\n        },\r\n        onEditTask: (task) => {\r\n            dispatch(actions.editTask(task))\r\n        },\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem)\r\n","import React, { Component } from 'react'\r\nimport TaskItem from './TaskItem'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"./../actions/index\";\r\nimport { filter, includes, orderBy } from 'lodash';\r\n\r\nexport class TaskList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            filterName: '',\r\n            filterStatus: -1\r\n        }\r\n    }\r\n\r\n    onChange = (event) => {\r\n        var name = event.target.name;\r\n        var value = event.target.value;\r\n        var filter = {\r\n            'name': name === 'filterName' ? value : this.state.filterName,\r\n            'status': name === 'filterStatus' ? value : this.state.filterStatus\r\n        }\r\n        this.props.onFilterTable(filter);\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        var { tasks, filterTable, keyword ,sort } = this.props;\r\n        if (filterTable.filterName) {\r\n            tasks = filter(tasks, (task) => {\r\n                return includes(task.name.toLowerCase(), filterTable.filterName.toLowerCase());\r\n            })\r\n        }\r\n\r\n        tasks = filter(tasks, (task) => {\r\n            return includes(task.name.toLowerCase(), keyword.toLowerCase());\r\n        })\r\n\r\n        tasks = filter(tasks, (task) => {\r\n            if (filterTable.filterStatus === -1) {\r\n                return tasks;\r\n            } else {\r\n                return task.status === (filterTable.filterStatus === 1 ? true : false);\r\n            }\r\n        })\r\n\r\n        tasks = orderBy(tasks, [sort.by], [sort.value]);\r\n\r\n\r\n        var elmTask = tasks.map((task, index) => {\r\n            return <TaskItem\r\n                key={task.id}\r\n                index={index}\r\n                task={task}\r\n            />\r\n        })\r\n        return (\r\n            <div className=\"row mt-15\">\r\n                <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                    <table className=\"table table-bordered table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"text-center\">STT</th>\r\n                                <th className=\"text-center\">Tên</th>\r\n                                <th className=\"text-center\">Trạng Thái</th>\r\n                                <th className=\"text-center\">Hành Động</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td />\r\n                                <td>\r\n                                    <input type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        name=\"filterName\"\r\n                                        value={this.state.filterName}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"filterStatus\"\r\n                                        value={this.state.filterStatus}\r\n                                        onChange={this.onChange}\r\n                                    >\r\n                                        <option value={-1}>Tất Cả</option>\r\n                                        <option value={0}>Ẩn</option>\r\n                                        <option value={1}>Kích Hoạt</option>\r\n                                    </select>\r\n                                </td>\r\n                                <td />\r\n                            </tr>\r\n                            {elmTask}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks,\r\n        filterTable: state.filterTable,\r\n        keyword: state.search,\r\n        sort: state.sort,\r\n    }\r\n};\r\n\r\nconst mapDispatchtoProps = (dispatch, props) => {\r\n    return {\r\n        onFilterTable: (filter) => {\r\n            dispatch(actions.filterTable(filter));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchtoProps)(TaskList)\r\n","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport TaskForm from './components/TaskForm';\r\nimport TaskControl from './components/TaskControl';\r\nimport TaskList from './components/TaskList';\r\nimport { connect } from 'react-redux'\r\nimport * as actions from './actions/index'\r\n\r\nclass App extends Component {\r\n\r\n    onToggleForm = () => {\r\n        if (this.props.itemEditing && this.props.itemEditing.id !== '') {\r\n            this.props.onOpenForm();\r\n        } else {\r\n            this.props.onToggleForm();\r\n        }\r\n        this.props.onClearTask({\r\n            id: '',\r\n            name: '',\r\n            status: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var { isDisplayForm } = this.props;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"text-center\">\r\n                    <h1>Quản Lý Công Việc</h1>\r\n                    <hr />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className={isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : ''}>\r\n                        <TaskForm />\r\n                    </div>\r\n                    <div className={isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-primary\"\r\n                            onClick={this.onToggleForm}\r\n                        >\r\n                            <span className=\"fa fa-plus mr-5\" />Thêm Công Việc\r\n                        </button>\r\n                        <TaskControl />\r\n                        <TaskList />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isDisplayForm: state.isDisplayForm,\r\n        itemEditing: state.itemEditing,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onToggleForm: () => {\r\n            dispatch(actions.toggleForm())\r\n        },\r\n        onClearTask: (task) => {\r\n            dispatch(actions.editTask(task))\r\n        },\r\n        onOpenForm: () => {\r\n            dispatch(actions.openForm())\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import uuid from \"uuid\";\r\nimport { LIST_ALL, UPDATE_TASK, UPDATE_STATUS_TASK, DELETE_TASK, ADD_TASK } from \"../constants/ActionTypes\";\r\n\r\nvar data = JSON.parse(localStorage.getItem('tasks'));\r\nvar initialState = data ? data : [];\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    var index = -1;\r\n    switch (action.type) {\r\n        case LIST_ALL:\r\n            return state;\r\n\r\n        case ADD_TASK:\r\n            console.log('action', action)\r\n            var newTask = {\r\n                id: uuid.v4(),\r\n                name: action.task.name,\r\n                status: (action.task.status === 'true' || action.task.status === true) ? true : false,\r\n            }\r\n            state = [...state, newTask];\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state];\r\n\r\n        case UPDATE_TASK:\r\n            var task = {\r\n                id: action.task.id,\r\n                name: action.task.name,\r\n                status: (action.task.status === 'true' || action.task.status === true) ? true : false,\r\n            }\r\n            index = state.findIndex(task => task.id === action.task.id);\r\n            state[index] = task;\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state];\r\n\r\n        case UPDATE_STATUS_TASK:\r\n            index = state.findIndex(task => task.id === action.id);\r\n            state[index] = {\r\n                ...state[index],\r\n                status: !state[index].status\r\n            };\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state];\r\n\r\n        case DELETE_TASK:\r\n            localStorage.setItem('tasks', JSON.stringify([...state.filter(task => task.id !== action.id)]))\r\n            return [...state.filter(task => task.id !== action.id)];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;\r\n","import { TOGGLE_FORM, OPEN_FORM, CLOSE_FORM } from \"../constants/ActionTypes\";\r\n\r\nvar initialState = false;\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TOGGLE_FORM:\r\n            return !state;\r\n        case OPEN_FORM:\r\n            return true;\r\n        case CLOSE_FORM:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;\r\n","import { EDIT_TASK } from \"../constants/ActionTypes\";\r\n\r\nvar initialState = {\r\n    id: '',\r\n    name: '',\r\n    status: false\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case EDIT_TASK:\r\n            state = action.task;\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;\r\n","import { FILTER_TABLE } from \"../constants/ActionTypes\";\r\n\r\nvar initialState = {\r\n    filterName: '',\r\n    filterStatus: -1\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FILTER_TABLE:\r\n            var {name,status} = action.filter;\r\n            return {...state, filterName : name , filterStatus : parseInt(status,10)};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;\r\n","import { SEARCH } from \"../constants/ActionTypes\";\r\n\r\nvar initialState = '';\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SEARCH:\r\n            return action.keyword;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;\r\n","import { SORT } from \"../constants/ActionTypes\";\r\n\r\nvar initialState = {\r\n    by : '',\r\n    value : '',\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SORT:\r\n            return {...state, by : action.sort.by ,value : action.sort.value};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport tasks from './tasks'\r\nimport isDisplayForm from './isDisplayForm'\r\nimport itemEditing from './itemEditing'\r\nimport filterTable from './filterTable'\r\nimport search from './search'\r\nimport sort from './sort'\r\n\r\nconst myReducer = combineReducers({\r\n    tasks, // tasks : tasks\r\n    isDisplayForm,\r\n    itemEditing,\r\n    filterTable,\r\n    search,\r\n    sort,\r\n});\r\n\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//store\nimport { createStore } from 'redux'\nimport myReducer from './reducers/index'\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n    myReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}